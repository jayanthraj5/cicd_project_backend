package com.example.medicalappointmentsystem.controller;

import com.example.medicalappointmentsystem.model.User;
import com.example.medicalappointmentsystem.repository.UserRepository;
import com.example.medicalappointmentsystem.security.JwtUtil;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
public class AuthController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder; // inject BCrypt bean

    // âœ… Register API
    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@RequestBody User user) {
        if (userRepository.findByEmail(user.getEmail()).isPresent()) {
            return ResponseEntity.badRequest().body("Email already exists!");
        }
        if (userRepository.findByUsername(user.getUsername()).isPresent()) {
            return ResponseEntity.badRequest().body("Username already exists!");
        }

        // ðŸ”’ Encrypt password before saving
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        userRepository.save(user);
        return ResponseEntity.ok("User registered successfully!");
    }

    @PostMapping("/login")
    public ResponseEntity<?> loginUser(@RequestBody User loginRequest) {
        return userRepository.findByEmail(loginRequest.getEmail())
                .map(user -> {
                    if (passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
                        // âœ… Generate JWT token
                        String token = JwtUtil.generateToken(user.getEmail(), user.getRole().toString());
                        return ResponseEntity.ok(token);
                    } else {
                        return ResponseEntity.badRequest().body("Invalid password!");
                    }
                })
                .orElse(ResponseEntity.badRequest().body("User not found!"));
    }

}
