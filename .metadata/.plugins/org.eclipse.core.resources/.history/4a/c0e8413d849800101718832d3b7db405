package com.example.medicalappointmentsystem.controller;

import com.example.medicalappointmentsystem.model.User;
import com.example.medicalappointmentsystem.repository.UserRepository;
import com.example.medicalappointmentsystem.dto.UserDTO;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/users") // all user-related endpoints
@CrossOrigin(origins = "http://localhost:5173") // allow frontend
public class UserController {

    private final UserRepository userRepository;

    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    // ✅ Get all users OR filter by role if query param is provided
    // Example: /api/users -> all users
    // Example: /api/users?role=DOCTOR -> only doctors
    // Example: /api/users?role=PATIENT -> only patients
    @GetMapping
    public List<UserDTO> getUsers(@RequestParam(required = false) String role) {
        List<User> users;
        if (role != null && !role.isEmpty()) {
            users = userRepository.findByRole(role);
        } else {
            users = userRepository.findAll();
        }

        // Convert User -> UserDTO
        return users.stream()
                .map(user -> new UserDTO(
                        user.getId(),
                        user.getUsername(),
                        user.getEmail(),
                        user.getRole().name()
                ))
                .collect(Collectors.toList());
    }

    // ✅ Get a single user by ID (returns DTO)
    @GetMapping("/{id}")
    public UserDTO getUserById(@PathVariable Long id) {
        User user = userRepository.findById(id).orElseThrow(
                () -> new RuntimeException("User not found with id " + id)
        );

        return new UserDTO(
                user.getId(),
                user.getUsername(),
                user.getEmail(),
                user.getRole().name()
        );
    }

    // ✅ Delete a user
    @DeleteMapping("/{id}")
    public void deleteUser(@PathVariable Long id) {
        userRepository.deleteById(id);
    }
}
